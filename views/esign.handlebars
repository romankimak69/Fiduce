<h1 class="page-header" style="text-align: center;">E-signe</h1>
<hr>
<div class="drawingarea">
  <canvas style="display: none;" id="export"></canvas>
  <img src="data:image/gif;base64,{{img}}"></img>
  <canvas style="touch-action: manipulation" id="draw"></canvas>
</div>
<hr>
<div class="col-md-12">
<div class="text-right">
    <form id="upload" method="post" action="/upload">
      <input name="fileinputname" type="hidden" value="{{file.name}}"></input>
      <input id="filename" type="hidden" value="{{file.filename}}"></input>
      <a class="btn btn-rounded btn-danger" href="/files"><i class="fa fa-ban"></i> Annuler</a>
      <button class="btn btn-rounded btn-primary" type="submit"><i class="fa fa-edit"></i> Signe</button>
      <input type="hidden" name="dir" value="{{file.dir}}">
      <input type="hidden" name="signed" value="true">
    </form>
</div>
</div>
</form>
<script>
var canvas = document.getElementById("draw");
var ctx = canvas.getContext("2d");
var canvas2 = document.getElementById("export");
var ctx2 = canvas2.getContext("2d");
ctx.strokeStyle = "#222222";
ctx.lineWidth = 2;
var drawing = false;
var mousePos = { x:0, y:0 };
var lastPos = mousePos;

resize();

function resize() {
  ctx.canvas.width = $(".drawingarea").width();
  ctx.canvas.height = $(".drawingarea").height();
}

canvas.addEventListener("mousedown", function (e) {
        drawing = true;
  lastPos = getMousePos(canvas, e);
}, false);
canvas.addEventListener("mouseup", function (e) {
  drawing = false;
}, false);
canvas.addEventListener("mousemove", function (e) {
  mousePos = getMousePos(canvas, e);
}, false);
window.addEventListener("resize", resize);

// Get the position of the mouse relative to the canvas
function getMousePos(canvasDom, mouseEvent) {
  var rect = canvasDom.getBoundingClientRect();
  return {
    x: mouseEvent.clientX - rect.left,
    y: mouseEvent.clientY - rect.top
  };
}

// Get a regular interval for drawing to the screen
window.requestAnimFrame = (function (callback) {
        return window.requestAnimationFrame || 
           window.webkitRequestAnimationFrame ||
           window.mozRequestAnimationFrame ||
           window.oRequestAnimationFrame ||
           window.msRequestAnimationFrame ||
           function (callback) {
        window.setTimeout(callback, 1000/60);
           };
})();

// Draw to the canvas
function renderCanvas() {
  if (drawing) {
    ctx.moveTo(lastPos.x, lastPos.y);
    ctx.lineTo(mousePos.x, mousePos.y);
    ctx.stroke();
    lastPos = mousePos;
  }
}

// Allow for animation
(function drawLoop () {
  requestAnimFrame(drawLoop);
  renderCanvas();
})();

// Set up touch events for mobile, etc
canvas.addEventListener("touchstart", function (e) {
    e.preventDefault();
        mousePos = getTouchPos(canvas, e);
  var touch = e.touches[0];
  var mouseEvent = new MouseEvent("mousedown", {
    clientX: touch.clientX,
    clientY: touch.clientY
  });
  canvas.dispatchEvent(mouseEvent);
}, false);
canvas.addEventListener("touchend", function (e) {
    e.preventDefault();
  var mouseEvent = new MouseEvent("mouseup", {});
  canvas.dispatchEvent(mouseEvent);
}, false);
canvas.addEventListener("touchmove", function (e) {
    e.preventDefault(); 
  var touch = e.touches[0];
  var mouseEvent = new MouseEvent("mousemove", {
    clientX: touch.clientX,
    clientY: touch.clientY
  });
  canvas.dispatchEvent(mouseEvent);
}, false);

// Get the position of a touch relative to the canvas
function getTouchPos(canvasDom, touchEvent) {
  var rect = canvasDom.getBoundingClientRect();
  return {
    x: touchEvent.touches[0].clientX - rect.left,
    y: touchEvent.touches[0].clientY - rect.top
  };
}
</script>
        <script>
            function b64toBlob(b64Data, contentType, sliceSize) {
                contentType = contentType || '';
                sliceSize = sliceSize || 512;

                var byteCharacters = atob(b64Data);
                var byteArrays = [];

                for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
                    var slice = byteCharacters.slice(offset, offset + sliceSize);

                    var byteNumbers = new Array(slice.length);
                    for (var i = 0; i < slice.length; i++) {
                        byteNumbers[i] = slice.charCodeAt(i);
                    }

                    var byteArray = new Uint8Array(byteNumbers);

                    byteArrays.push(byteArray);
                }

              var blob = new Blob(byteArrays, {type: contentType});
              return blob;
            }

            $("#upload").submit(function(e){
                e.preventDefault();
                  console.log("signing...")
                  var imageObj1 = new Image();
                  imageObj1.src = $(".drawingarea img").attr("src");
                  canvas2.width = imageObj1.width;
                  canvas2.height = imageObj1.height;
                  ctx2.canvas.width = imageObj1.width;
                  ctx2.canvas.height = imageObj1.height;
                  ctx2.drawImage(imageObj1, 0, 0, imageObj1.width, imageObj1.height);
                  ctx2.drawImage(canvas, 0, 0, imageObj1.width, imageObj1.height);
                  var img = canvas2.toDataURL("image/png");
                  console.log(img);
                appendFileAndSubmit(img);
            });

            function appendFileAndSubmit(ImageURL){
                // Get the form
                var form = document.getElementById("upload");

                // Split the base64 string in data and contentType
                var block = ImageURL.split(";");
                // Get the content type
                var contentType = block[0].split(":")[1];// In this case "image/gif"
                // get the real base64 content of the file
                var realData = block[1].split(",")[1];// In this case "iVBORw0KGg...."

                // Convert to blob
                var blob = b64toBlob(realData, contentType);

                // Create a FormData and append the file
                var fd = new FormData(form);
                fd.append("file", blob, $("#filename").val());

                // Submit Form and upload file
                $.ajax({
                    url:"/upload",
                    data: fd,// the formData function is available in almost all new browsers.
                    type:"POST",
                    contentType:false,
                    processData:false,
                    cache:false,
                    dataType:"html", // Change this according to your response from the server.
                    error:function(err){
                        console.error(err);
                    },
                    success:function(data){
                        console.log(data);
                    },
                    complete:function(){
                        console.log("Request finished.");
                    }
                });
                setTimeout(function(){
                  window.location.href = "/files"
                },1000)
            }
        </script>